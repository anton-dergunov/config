#+TITLE: Emacs Configuration for "Getting Things Done" with Org Mode

* Packages Setup
** Disable package signature checking as a workaround for installation issues
#+BEGIN_SRC emacs-lisp
;; https://emacs.stackexchange.com/questions/233/how-to-proceed-on-package-el-signature-check-failure
(setq package-check-signature nil)
#+END_SRC

** Initialize =melpa= package repository
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
       (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
;; TODO Check if required
;; Warning (package): Unnecessary call to ‘package-initialize’ in init file
;; (package-initialize)
#+END_SRC

** Install and configure =use-package=
#+BEGIN_SRC emacs-lisp
(unless package-archive-contents
        (package-refresh-contents))

(unless (package-installed-p 'use-package)
        (package-install 'use-package))
   
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* User Interface
** Basic UI Tweaks
#+BEGIN_SRC emacs-lisp
;; Disable the splash screen
(setq inhibit-splash-screen t)

;; Disable tooltips
(tooltip-mode -1)

;; Disable the toolbar
(tool-bar-mode -1)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
;; Show column number in mode line
(column-number-mode)

;; Display line numbers globally
(global-display-line-numbers-mode t)

;; Disable line numbers for specific modes
(dolist (mode '(term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Word wrap (but only in text mode, not in agenda)
#+BEGIN_SRC emacs-lisp
;; https://www.inmotionhosting.com/support/edu/software/how-to-wrap-text-in-emacs/
(add-hook 'text-mode-hook 'visual-line-mode)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
;; Set font based on the operating system
(if (eq system-type 'darwin)
    (set-face-attribute 'default nil :font "Monaco-14"))
(if (eq system-type 'windows-nt)
    (set-face-attribute 'default nil :font "Consolas-11"))
#+END_SRC

** Solarized Light Theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
:config
(setq
    ;; Make the fringe stand out from the background
    solarized-distinct-fringe-background nil

    ;; Don't change the font for some headings and titles
    solarized-use-variable-pitch nil

    ;; Make the modeline high contrast
    solarized-high-contrast-mode-line nil

    ;; Use less bolding
    solarized-use-less-bold t

    ;; Use more italics
    solarized-use-more-italic t

    ;; Use less colors for indicators such as git:gutter, flycheck and similar
    solarized-emphasize-indicators nil

    ;; Don't change size of org-mode headlines (but keep other size-changes)
    solarized-scale-org-headlines nil

    ;; Avoid all font-size changes
    solarized-height-minus-1 1.0
    solarized-height-plus-1 1.0
    solarized-height-plus-2 1.0
    solarized-height-plus-3 1.0
    solarized-height-plus-4 1.0)
(load-theme 'solarized-light t))
#+END_SRC

* Org Mode
** Org Agenda
#+BEGIN_SRC emacs-lisp
;; Define custom TODO keywords/states
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)")))

;; Automatically add all Org files in the specified directory to the agenda
;; https://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically
(setq org-agenda-files (directory-files-recursively (concat my-base-directory "Plans/") "\\.org$"))

;; Fix displaying "???" in agenda view columns
;; https://www.reddit.com/r/emacs/comments/s9hl74/mystery_question_marks_on_my_agenda/
;; https://emacs.stackexchange.com/questions/42006/trouble-with-org-mode-cache-find-error
(setq org-element-use-cache nil)

;; Set a global keybinding for accessing Org agenda
;; TODO Consider removing
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

** Auto-save Org buffers
#+BEGIN_SRC emacs-lisp
;; Auto-save all Org buffers
;; https://christiantietze.de/posts/2019/03/sync-emacs-org-files/
(add-hook 'auto-save-hook 'org-save-all-org-buffers)

;; Automatically revert buffers when files change on disk
(global-auto-revert-mode t)
#+END_SRC

** Enhanced bullets using =org-superstar=
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
:hook (org-mode . org-superstar-mode)
:config
;; Disable leading dots for bullets
;; https://www.reddit.com/r/orgmode/comments/pfgcql/comment/hb4g8j0/
(setq org-superstar-leading-bullet ?\s))

;; Slightly increase header fonts depending on the level
;; https://stackoverflow.com/questions/77332358/how-can-i-adjust-the-fonts-and-sizes-of-bullets-in-org-superstar
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.04))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.03))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.02))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.01))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
  )
#+END_SRC

** =org-journal=
#+BEGIN_SRC emacs-lisp
(use-package org-journal
:config
;; TODO Comment these settings
(setq org-journal-file-format "%Y-%m-%d.org"
      org-extend-today-until 4
      org-journal-file-type 'weekly
      org-journal-date-format "%A, %d %B %Y"
      org-journal-dir (concat my-base-directory "Journal/")))
#+END_SRC

* Workflow Enhancements
** =ivy=, =counsel=, and =swiper= for enhanced completion and searching
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  ;; TODO Document these settings
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-history)))

(use-package ivy-rich
  :init (ivy-rich-mode 1))
#+END_SRC

** =helpful= for enhanced help buffers
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC

** =which-key= for displaying available keybindings
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.3))
#+END_SRC

* File and Directory Management
** Default directory
#+BEGIN_SRC emacs-lisp
(setq default-directory (concat my-base-directory "Plans/"))
#+END_SRC

** Workaround error on startup regarding unsupported =ls --dired= on MacOS
#+BEGIN_SRC emacs-lisp
;; https://stackoverflow.com/questions/25125200/emacs-error-ls-does-not-support-dired
(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))
#+END_SRC

** =neotree= for file explorer functionality
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (neotree-dir my-base-directory))
#+END_SRC

* Menu Bar and Keybindings
** F8 to Show Neotree
#+BEGIN_SRC emacs-lisp
(global-set-key [f8] 'neotree-toggle)
#+END_SRC

** F9 to Show Agenda
#+BEGIN_SRC emacs-lisp
;; Show the agenda with the "NEXT" tasks and delete other windows
(defun my-show-agenda ()
  (interactive)
  (org-todo-list "NEXT")
  (delete-other-windows))

(global-set-key [f9] 'my-show-agenda)
#+END_SRC

** GTD Menu
#+BEGIN_SRC emacs-lisp
;; Add a custom "GTD" menu to the menu bar
;; https://emacs.stackexchange.com/questions/15093/how-to-add-an-item-to-the-menu-bar
(defvar my-menu-bar-menu (make-sparse-keymap "GTD"))
(define-key global-map [menu-bar my-menu] (cons "GTD" my-menu-bar-menu))

;; Insert GTD before the Help menu
(setq menu-bar-final-items (append menu-bar-final-items '(my-menu)))

;; Define the menu items for GTD
(define-key my-menu-bar-menu [my-cmd1]
  '(menu-item "Toggle Neotree" neotree-toggle :help "Toggle Neotree"))
(define-key my-menu-bar-menu [my-cmd2]
  '(menu-item "Show Agenda" my-show-agenda :help "Show Agenda"))
#+END_SRC

* Session Management and Backups
** Save and Restore Sessions
#+BEGIN_SRC emacs-lisp
;; Save and restore the Emacs session (buffers, history, etc.)
;; https://emacs.stackexchange.com/questions/639/how-can-i-restart-emacs-and-preserve-my-open-buffers-and-interactive-history
(desktop-save-mode 1)
(savehist-mode 1)

;; Save the kill-ring to the history
(add-to-list 'savehist-additional-variables 'kill-ring)

;; Reload desktop without asking
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html#:~:text=You%20can%20avoid%20the%20question,load%20the%20desktop%20without%20asking
(setq desktop-load-locked-desktop t)
#+END_SRC

** Backup and Autosave Configuration
#+BEGIN_SRC emacs-lisp
;; Store backup files and auto-save files in a specific directory
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory)))
      auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t))
      ;; Disable lock files (.#init.el)
      create-lockfiles nil)

;; Ensure the auto-save directory exists (auto-save-mode doesn't create it)
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

;; Altarnatives:
;; - https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Cleaning.org
;; - no-littering package: https://github.com/emacscollective/no-littering
#+END_SRC

